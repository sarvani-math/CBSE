# -*- coding: utf-8 -*-
"""4.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GvuGl_svfgTfgLcmydFs9PfnODPn8p54
"""

import numpy as np
import mpmath as mp
import matplotlib.pyplot as plt
from numpy import linalg as LA
import sys 
import sympy as sym

!cp /content/gdrive/MyDrive/CoordGeo/line/line_funcs.py /content
!cp /content/gdrive/MyDrive/CoordGeo/triangle/triangle_funcs.py /content
!cp /content/gdrive/MyDrive/CoordGeo/conics/conics_funcs.py /content 
!cp /content/gdrive/MyDrive/CoordGeo/params.py /content

from mpmath import *
mp.dps = 15; mp.pretty = True

a= 4
s = 2
theta = pi/6
e1 = np.array(([1,0]))
e2 = np.array(([0,1]))

B = a*e1
F = (a+s)*e1
C = np.array(([0,0]))
A = np.array(([a,a*mp.tan(theta)]))
D = np.array(([a,a*(2/5)*mp.tan(theta)]))
E = np.array(([a+s,(a)*(2/5)*mp.tan(theta)]))

x_AB = line_gen(A,B)
x_BC= line_gen(B,C)
x_CA = line_gen(C,A)
x_AD = line_gen(A,D)
x_BD = line_gen(B,D)
x_DE = line_gen(D,E)
x_AE = line_gen(A,E)
x_EF = line_gen(E,F)
x_BF = line_gen(B,F)

plt.plot(x_AB[0,:],x_AB[1,:],label='$AB$')
plt.plot(x_BC[0,:],x_BC[1,:],label='$BC$')
plt.plot(x_CA[0,:],x_CA[1,:],label='$CA$')
plt.plot(x_AD[0,:],x_AD[1,:],label='$AD$')
plt.plot(x_BD[0,:],x_BD[1,:],label='$BD$')
plt.plot(x_DE[0,:],x_DE[1,:],label='$DE$')
plt.plot(x_AE[0,:],x_AE[1,:],label='$AE$')
plt.plot(x_EF[0,:],x_EF[1,:],label='$EF$')
plt.plot(x_BF[0,:],x_BF[1,:],label='$BF$')
tri_coords = np.vstack((A,B,C,D,E,F)).T
plt.scatter(tri_coords[0,:], tri_coords[1,:])
vert_labels = ['A','B','C','D', 'E', 'F']
for i, txt in enumerate(vert_labels):
    plt.annotate(txt, # this is the text
                 (tri_coords[0,i], tri_coords[1,i]), # this is the point to label
                 textcoords="offset points", # how to position the text
                 xytext=(0,10), # distance from text to points (x,y)
                 ha='center') # horizontal alignment can be left, right or center

plt.xlabel('$x$')
plt.ylabel('$y$')
plt.legend(loc='best')
plt.grid() # minor
plt.axis('equal')

D

E

